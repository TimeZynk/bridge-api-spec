openapi: "3.0.0"
info:
  title: Timezynk integration bridge API
  description: API for synchronizing and mapping data from and to Timezynk. Oauth2 authentication, require permission level manager or api-client with scope write:company. Info about authentication [https://developer.timezynk.com](https://developer.timezynk.com/#section/Authentication)
  version: 0.1.4

tags:
  - name: Data source
    description: Synk data from a data source to a Timezynk registry.
  - name: Data sink
    description: Synk data from a Timezynk registry to a data sink.

paths:
  /data-sources:
    get:
      summary: List registered datasources
      tags:
        - Data source
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataSource"
        '401':
          description: Unauthorized.
        '500':
          description: Unexpected error.

    post:
      summary: Register a data source
      tags:
        - Data source
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataSource"
                
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataSource"
        '400':
          description: Bad Request. Data provided in request body is invalid.
        '401':
          description: Unauthorized.
        '409':
          description: Conflict. A data source with the provided id is already existing.
        '500':
          description: Unexpected error.

  /data-sinks:
    get:
      summary: List registered datasources
      tags:
        - Data sink
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataSink"
        '401':
          description: Unauthorized.
        '500':
          description: Unexpected error.

    post:
      summary: Register a data source
      tags:
        - Data sink
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataSink"
                
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataSink"
        '400':
          description: Bad Request. Data provided in request body is invalid.
        '401':
          description: Unauthorized.
        '409':
          description: Conflict. A data source with the provided id is already existing.
        '500':
          description: Unexpected error.

  /data-sources/{dataSourceId}/synchronization-state:
    get:
      summary: Lists synchronization status for your data sources
      tags:
        - Source
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SynchronizationState"
        '401':
          description: Unauthorized.
        '500':
          description: Unexpected error.
    parameters:
    - name: dataSourceId
      description: Id of the data source
      required: true
      in: path
      schema:
        type: string
  
  /entities:
    get:
      summary: List entities
      tags:
        - Entity
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntitySettings"
        '401':
          description: Unauthorized.
        '500':
          description: Unexpected error.

  /entities/{entityId}:
    put:
      summary: Update entity
      tags:
        - Entity
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntitySettings"
        '401':
          description: Unauthorized.
        '500':
          description: Unexpected error.
    parameters:
    - name: entityId
      description: Id of the entity
      required: true
      in: path
      schema:
        type: string

  /entities/{entityId}/changes:
    get:
      summary: Sync changes from data source
      tags:
        - Entity
      responses:
        '200':
          description: Success.
          headers:
            Link:
              description: Url of the next batch of items
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataSource"
        '400':
          description: Bad Request. Data provided in request body is invalid.
        '401':
          description: Unauthorized.
        '500':
          description: unexpected error.
      parameters:
      - name: entityId
        description: Id of the entity
        required: true
        in: path
        schema:
          type: string
    post:
      summary: Sync changes from data source
      tags:
        - Entity

      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/DataSource"

      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataSource"

              
        '400':
          description: Bad Request. Data provided in request body is invalid.
        '401':
          description: Unauthorized.
        '500':
          description: unexpected error.
  
    parameters:
    - name: entityId
      description: Id of the entity
      required: true
      in: path
      schema:
        type: string
  /entities/{entityId}/next-sync:
    get:
      summary: Next sync
      tags:
        - Entity
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityNextSync"
        '400':
          description: Bad Request. Data provided in request body is invalid.
        '401':
          description: Unauthorized.
        '500':
          description: unexpected error.
      parameters:
      - name: entityId
        description: Id of the entity
        required: true
        in: path
        schema:
          type: string
    put:
      summary: Next sync
      description: This endpoint acts as a confirmation for a successful synchronization. When called, it will record the current timestamp, and use to calculate when next synchronization should occur.
      tags:
        - Entity
  
      requestBody:
        content:
          application/json:
            
            schema:
              type: string
              description: Field to store relevant meta for the next synchronization. E.g. for a data source you might want to store a timestamp, and for a data sink, you might want to store the Link header returned in the most recent GET /entities/{entityId}/changes response.
              
      responses:
        '200':
          description: Success.
        '400':
          description: Bad Request. Data provided in request body is invalid.
        '401':
          description: Unauthorized.
        '500':
          description: unexpected error.
      parameters:
      - name: entityId
        description: Id of the entity
        required: true
        in: path
        schema:
          type: string

components:
  schemas:
    DataSource:
      properties:
        id:
          type: string
          description: id of the source
          format: ObjectId
          readOnly: true
        name:
          type: string
          description: name of the source
        vendor:
          type: string
          description: id of the system to integrate with Timezynk.
        company-id:
          type: string
          description: id of the company that owns this data
          readOnly: true
        entities:
          type: array
          description: list of available entities
          items:
            $ref: "#/components/schemas/Entity"
      required:
        - id
        - vendor
        - company-id
        - name
        - entities

    DataSink:
      allOf:
        - $ref: '#/components/schemas/DataSource'

    Entity:
      properties:
        id:
          type: string
          description: id of the entity,
          format: ObjectId
          readOnly: true
        name:
          type: string
          description: title of the entity
        fields:
          type: array
          description: list of available entities
          items:
            $ref: "#/components/schemas/Field"
        field-key:
          type: string
          description: Identifies a unique field which will be used as key (id) for the entity rows.
        timestamp-key:
          type: string
          description: Identifies a timestamp field which will be used to calculate the most recent updated synced entry.
      required:
        - id
        - name
        - fields
        - field-key
        - timestamp-key

    Field:
      properties:
        id:
          type: string
          description: id representing the field name from your dataset.
        name:
          type: string
          description: title of the field
        type:
          type: string
          enum: [string, number, boolean]
          description: the value json data type
        format:
          type: string
          description: how to value should be formatted
        required:
          type: boolean
          description: indicates if this field is required
          default: true
      required:
        - id
        - name
        - type
        - required

    EntitySettings:
      properties:
        id:
          type: string
          description: Id of the entity.
          format: ObjectId
          readOnly: true
        company-id:
          type: string
          description: id of the company that owns this data.
          format: ObjectId
          readOnly: true
        source-id:
          type: string
          description: Id of the source which contains the entity.
          format: ObjectId
          readOnly: true
        collection-id:
          type: string
          format: ObjectId
          description: Id of the Timezynk collection to map fields. E.g. a registry id or invoices
        sync-interval:
          type: integer
          format: int64
          description: Duration of the sync interval entered in ms.
        field-mapping:
          type: array
          description: list of field mapping
          items:
            $ref: "#/components/schemas/FieldSettings"
      required:
        - id
        - company-id
        - source-id
        - collection-id
        - sync-interval
        - field-mapping

    EntityNextSync:
      properties:
        meta:
          type: string
          description: Field to store relevant meta for the next synchronization. E.g. for a data source you might want to store a timestamp, and for a data sink, you might want to store the Link header returned in the most recent GET /entities/{entityId}/changes response.
        next-sync:
          type: number
          format:  timestamp
          description: Timestamp of when next synchronization should occur.

    FieldSettings:
      properties:
        entity-field-id:
          type: string
          description: Id of the entity field to map.
        collection-field-id:
          type: string
          description: Id of the Timezynk collection field to map.
      required:
        - entity-field-id
        - collection-field-id

    SynchronizationState:
      properties:
        entity-id:
          type: string
          description: Id of the entity.
        last-sync:
          type: integer
          format: int64
          description: Timestamp in ms of the latest sync.
        last-update:
          type: string
          description: Legacy field.
        sync-interval:
          type: integer
          format: int64
          description: Duration of the sync interval entered in ms.
      required:
        - entity-id
        - last-sync
        - last-update
        - sync-interval



